---
import Layout from '../layouts/Layout.astro';
import { createAccordionMachine } from '../logic/accordion';

const agentImports = import.meta.glob('../../../../.claude/agents/*.md');

const agents = await Promise.all(
  Object.entries(agentImports).map(async ([path, agentImport]) => {
    const { frontmatter, rawContent } = await agentImport();
    const filename = path.split('/').pop();
    return {
      name: frontmatter.name,
      description: frontmatter.description,
      content: rawContent(),
      githubUrl: `https://github.com/iamrichardd/dotagents/blob/main/.claude/agents/${filename}`,
    };
  })
);
---

<Layout title="dotagents">
  <section class="hero">
    <h1>Your AI Teammates Should Be as Consistent as Your Dev Environment.</h1>
    <p>Stop treating your AI agents like disposable prompts and start treating them like code. `dotagents` provides a simple, powerful way to manage, version, and share your AI subagents, ensuring that everyone on your team has access to the same high-quality tools.</p>
    <a href="/articles/how-to-expand-your-team-with-dotagents" class="cta-button">Read Our Story</a>
  </section>

  <section class="agent-list">
    <h2>Available Agents</h2>
    <ul class="agent-accordion">
      {agents.map((agent, index) => (
        <li class="agent-item" data-index={index}>
          <button class="agent-header">
            <h3>{agent.name}</h3>
            <p>{agent.description}</p>
            <span class="icon">+</span>
          </button>
          <div class="agent-content">
            <div class="agent-content-inner">
              <pre><code>{agent.content}</code></pre>
              <a href={agent.githubUrl} target="_blank" rel="noopener noreferrer" class="github-link">View on GitHub</a>
            </div>
          </div>
        </li>
      ))}
    </ul>
  </section>
</Layout>

<script>
  import { createAccordionMachine } from '../logic/accordion';

  const accordionItems = document.querySelectorAll('.agent-item');
  const machine = createAccordionMachine(accordionItems.length);

  function updateUI(state) {
    accordionItems.forEach((item, index) => {
      const content = item.querySelector('.agent-content');
      const icon = item.querySelector('.icon');
      const isActive = state.openIndex === index;

      item.classList.toggle('active', isActive);
      icon.textContent = isActive ? '-' : '+';
      content.style.maxHeight = isActive ? content.scrollHeight + "px" : null;
    });
  }

  accordionItems.forEach((item, index) => {
    const button = item.querySelector('.agent-header');
    button.addEventListener('click', () => {
      machine.transition('TOGGLE', { index });
      const newState = machine.getState();
      updateUI(newState);
    });
  });

  // Initialize the UI
  updateUI(machine.getState());
</script>

<style>
  /* ... existing styles ... */
  .hero {
    text-align: center;
    padding: 4rem 1rem;
    background-color: var(--background-color);
  }

  .hero h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .hero p {
    font-size: 1.2rem;
    color: var(--text-secondary);
  }

  .agent-list {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .agent-list h2 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 2rem;
    color: var(--primary-color);
  }

  .agent-accordion {
    list-style: none;
    padding: 0;
    display: grid;
    gap: 1rem;
  }

  .agent-item {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
  }

  .agent-header {
    background: none;
    border: none;
    width: 100%;
    text-align: left;
    padding: 1.5rem;
    cursor: pointer;
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
    gap: 1rem;
  }

  .agent-header h3 {
    margin: 0;
    color: var(--primary-color);
    font-size: 1.5rem;
  }

  .agent-header p {
    margin: 0;
    grid-column: 1;
    color: var(--text-secondary);
  }

  .icon {
    font-size: 2rem;
    color: var(--primary-color);
    transition: transform 0.2s ease;
  }

  .agent-item.active .icon {
    transform: rotate(45deg);
  }

  .agent-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
    background-color: #f9f9f9;
  }

  .agent-content-inner {
    padding: 1.5rem;
  }

  .agent-content pre {
    padding: 1.5rem;
    margin: 0 0 1.5rem 0;
    white-space: pre-wrap;
    word-wrap: break-word;
    background-color: #2d2d2d;
    color: #f1f1f1;
    border-radius: 8px;
  }

  .github-link {
    display: inline-block;
    font-weight: 500;
    color: var(--primary-color);
    text-decoration: none;
    border: 1px solid var(--primary-color);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  .github-link:hover {
    background-color: var(--primary-color);
    color: white;
  }
</style>
