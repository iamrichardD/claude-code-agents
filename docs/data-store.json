[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.5","content-config-digest","6191adda81270ec3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://iamrichardd.github.io/dotagents\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","articles",["Map",11,12,51,52,78,79,107,108],"article-2-source-dialogue",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"rendered":22,"legacyId":50},{"title":14,"description":15,"publishDate":16,"author":17,"draft":18},"Source Material: Kick-off Interview for \"Your AI Agents Should Have Heroes\"","Source material - not for publication.","2025-07-31","The dotagents team",true,"# Source Material: Kick-off Interview for \"Your AI Agents Should Have Heroes\"\n\nThis document contains the raw, unedited dialogue from the kick-off interview and voting session for the second article. It is preserved for independent review and as potential source material for future articles, as requested by Richard.\n\n## Interview Question 1: The Core Thesis\n\n**Richard:** Let's start with the Why. Why give your AI Agents influences? The reasoning behind that is to provide the agent a voice. Interacting with an agent who thinks about a task vs. blind execution of a task give you a product that's meaningful? thoughtful? You get a product that can speak to the end use. For example technical writing having an infuence like Paul Ford can embule what your agent writes have empathy for the developer experience vs \"stereo instruction.\" That's important for me. Having a software developer agent how has influence from Kent Beck and Martin Fowler could create an agent experience where collaborative interaction and good software architecture that's well structure with low cognative low. So think about an AI Agent with influnces of Frida Khalo vs. Andy Warhol and the design aesthetic they would present. Why? We'll you as a software developer, think about your influences and who would you want your team members influences be? What are the teams thoughts?\n\n**Team Response Summary:**\n- **Technical Writer:** Focused on the \"empathy for the developer experience vs. stereo instructions\" as a core narrative contrast.\n- **Agile Coach:** Highlighted how shared influences create a predictable, low-friction process, reducing waste.\n- **Designer:** Emphasized how the Kahlo/Warhol example makes the abstract concept of \"influence\" concrete and visual.\n\n## Interview Question 2: The Golden Circle\n\n**Richard:** I think this is our why, how, and what:\n* Why - To create a development environment the reduces friction, increases cohesiveness, and empower the end user to do more with less.\n* How - Imbue agents with thought leaders which have influeced you.\n* What - dotfiles.\n\n**Team Response Summary:**\n- **Marketing Expert:** Identified this as the core brand story, aligning with the principle that people buy the \"Why.\"\n- **Technical Writer:** Saw this as the perfect three-act structure for the article itself.\n- **Agile Coach:** Recognized the \"Why\" as the ultimate empowerment tool for an autonomous, aligned team.\n\n## Interview Question 3: The Opening Pain Point\n\n**Richard:** Reduce or avoid AL slop, no offence to the team. Improve the quality of the product; with less iterations. Cohesive and collaborative interactions with me Agents... I want better code. I want it with less iterations. I want it be able to understand it to maintain it in the future.\n\n**Team Response Summary:**\n- **Technical Writer:** Identified \"AI Slop\" as the villain of the story and the perfect hook.\n- **Agile Coach:** Connected \"AI Slop\" to the concept of waste in lean manufacturing.\n- **Frontend Developer:** Resonated with the pain of receiving technically correct but unmaintainable code.\n\n## Interview Question 4: Article Structure (Breadth vs. Depth)\n\n**Richard:** I would say short and complimenty. I suspect the target audiance will be technical but we have a variety of influence and having more breadth could draw people in to think out side of the box. We are right?\n\n**Team Response Summary:**\n- **Marketing Expert:** Agreed that breadth creates more entry points for a wider audience.\n- **Designer:** Noted that the juxtaposition of diverse heroes (technical and creative) is a powerful statement.\n- **Technical Writer:** Saw it as a way to make the article more dynamic and readable.\n\n## Interview Question 5 & Rank-Choice Vote: Hero Pairings\n\n**Richard:** Let's get a rank voting from the team and see if there's a clear set of hero pairings.\n\n**Voting Tally:**\n\n| Pairing | PM | AC | TW | ME | DE | FD | **Total** |\n| :--- | :-: | :-: | :-: | :-: | :-: | :-: | :---: |\n| (D) Fowler & Ford | 3 | 2 | 3 | 1 | | 2 | **11** |\n| (E) Beck & Kahlo | 2 | 1 | | 3 | 3 | | **9** |\n| (A) Beck & Fowler | | 3 | 1 | | | 3 | **7** |\n| (B) Ford & Norman | 1 | | 2 | | 2 | 1 | **6** |\n| (C) Kahlo & Warhol | | | | 2 | 1 | | **3** |\n\n**Outcome:** The team selected (D) Fowler & Ford as the primary example and (E) Beck & Kahlo as the secondary, inspirational example.","src/content/articles/article-2-source-dialogue.md","8dd2faa2527b0bb3",{"html":23,"metadata":24},"\u003Ch1 id=\"source-material-kick-off-interview-for-your-ai-agents-should-have-heroes\">Source Material: Kick-off Interview for “Your AI Agents Should Have Heroes”\u003C/h1>\n\u003Cp>This document contains the raw, unedited dialogue from the kick-off interview and voting session for the second article. It is preserved for independent review and as potential source material for future articles, as requested by Richard.\u003C/p>\n\u003Ch2 id=\"interview-question-1-the-core-thesis\">Interview Question 1: The Core Thesis\u003C/h2>\n\u003Cp>\u003Cstrong>Richard:\u003C/strong> Let’s start with the Why. Why give your AI Agents influences? The reasoning behind that is to provide the agent a voice. Interacting with an agent who thinks about a task vs. blind execution of a task give you a product that’s meaningful? thoughtful? You get a product that can speak to the end use. For example technical writing having an infuence like Paul Ford can embule what your agent writes have empathy for the developer experience vs “stereo instruction.” That’s important for me. Having a software developer agent how has influence from Kent Beck and Martin Fowler could create an agent experience where collaborative interaction and good software architecture that’s well structure with low cognative low. So think about an AI Agent with influnces of Frida Khalo vs. Andy Warhol and the design aesthetic they would present. Why? We’ll you as a software developer, think about your influences and who would you want your team members influences be? What are the teams thoughts?\u003C/p>\n\u003Cp>\u003Cstrong>Team Response Summary:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Technical Writer:\u003C/strong> Focused on the “empathy for the developer experience vs. stereo instructions” as a core narrative contrast.\u003C/li>\n\u003Cli>\u003Cstrong>Agile Coach:\u003C/strong> Highlighted how shared influences create a predictable, low-friction process, reducing waste.\u003C/li>\n\u003Cli>\u003Cstrong>Designer:\u003C/strong> Emphasized how the Kahlo/Warhol example makes the abstract concept of “influence” concrete and visual.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"interview-question-2-the-golden-circle\">Interview Question 2: The Golden Circle\u003C/h2>\n\u003Cp>\u003Cstrong>Richard:\u003C/strong> I think this is our why, how, and what:\u003C/p>\n\u003Cul>\n\u003Cli>Why - To create a development environment the reduces friction, increases cohesiveness, and empower the end user to do more with less.\u003C/li>\n\u003Cli>How - Imbue agents with thought leaders which have influeced you.\u003C/li>\n\u003Cli>What - dotfiles.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Team Response Summary:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Marketing Expert:\u003C/strong> Identified this as the core brand story, aligning with the principle that people buy the “Why.”\u003C/li>\n\u003Cli>\u003Cstrong>Technical Writer:\u003C/strong> Saw this as the perfect three-act structure for the article itself.\u003C/li>\n\u003Cli>\u003Cstrong>Agile Coach:\u003C/strong> Recognized the “Why” as the ultimate empowerment tool for an autonomous, aligned team.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"interview-question-3-the-opening-pain-point\">Interview Question 3: The Opening Pain Point\u003C/h2>\n\u003Cp>\u003Cstrong>Richard:\u003C/strong> Reduce or avoid AL slop, no offence to the team. Improve the quality of the product; with less iterations. Cohesive and collaborative interactions with me Agents… I want better code. I want it with less iterations. I want it be able to understand it to maintain it in the future.\u003C/p>\n\u003Cp>\u003Cstrong>Team Response Summary:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Technical Writer:\u003C/strong> Identified “AI Slop” as the villain of the story and the perfect hook.\u003C/li>\n\u003Cli>\u003Cstrong>Agile Coach:\u003C/strong> Connected “AI Slop” to the concept of waste in lean manufacturing.\u003C/li>\n\u003Cli>\u003Cstrong>Frontend Developer:\u003C/strong> Resonated with the pain of receiving technically correct but unmaintainable code.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"interview-question-4-article-structure-breadth-vs-depth\">Interview Question 4: Article Structure (Breadth vs. Depth)\u003C/h2>\n\u003Cp>\u003Cstrong>Richard:\u003C/strong> I would say short and complimenty. I suspect the target audiance will be technical but we have a variety of influence and having more breadth could draw people in to think out side of the box. We are right?\u003C/p>\n\u003Cp>\u003Cstrong>Team Response Summary:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Marketing Expert:\u003C/strong> Agreed that breadth creates more entry points for a wider audience.\u003C/li>\n\u003Cli>\u003Cstrong>Designer:\u003C/strong> Noted that the juxtaposition of diverse heroes (technical and creative) is a powerful statement.\u003C/li>\n\u003Cli>\u003Cstrong>Technical Writer:\u003C/strong> Saw it as a way to make the article more dynamic and readable.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"interview-question-5--rank-choice-vote-hero-pairings\">Interview Question 5 &#x26; Rank-Choice Vote: Hero Pairings\u003C/h2>\n\u003Cp>\u003Cstrong>Richard:\u003C/strong> Let’s get a rank voting from the team and see if there’s a clear set of hero pairings.\u003C/p>\n\u003Cp>\u003Cstrong>Voting Tally:\u003C/strong>\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">Pairing\u003C/th>\u003Cth align=\"center\">PM\u003C/th>\u003Cth align=\"center\">AC\u003C/th>\u003Cth align=\"center\">TW\u003C/th>\u003Cth align=\"center\">ME\u003C/th>\u003Cth align=\"center\">DE\u003C/th>\u003Cth align=\"center\">FD\u003C/th>\u003Cth align=\"center\">\u003Cstrong>Total\u003C/strong>\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">(D) Fowler &#x26; Ford\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">\u003Cstrong>11\u003C/strong>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">(E) Beck &#x26; Kahlo\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">\u003Cstrong>9\u003C/strong>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">(A) Beck &#x26; Fowler\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">3\u003C/td>\u003Ctd align=\"center\">\u003Cstrong>7\u003C/strong>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">(B) Ford &#x26; Norman\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003Cstrong>6\u003C/strong>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd align=\"left\">(C) Kahlo &#x26; Warhol\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">2\u003C/td>\u003Ctd align=\"center\">1\u003C/td>\u003Ctd align=\"center\">\u003C/td>\u003Ctd align=\"center\">\u003Cstrong>3\u003C/strong>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>\u003Cstrong>Outcome:\u003C/strong> The team selected (D) Fowler &#x26; Ford as the primary example and (E) Beck &#x26; Kahlo as the secondary, inspirational example.\u003C/p>",{"headings":25,"localImagePaths":46,"remoteImagePaths":47,"frontmatter":48,"imagePaths":49},[26,30,34,37,40,43],{"depth":27,"slug":28,"text":29},1,"source-material-kick-off-interview-for-your-ai-agents-should-have-heroes","Source Material: Kick-off Interview for “Your AI Agents Should Have Heroes”",{"depth":31,"slug":32,"text":33},2,"interview-question-1-the-core-thesis","Interview Question 1: The Core Thesis",{"depth":31,"slug":35,"text":36},"interview-question-2-the-golden-circle","Interview Question 2: The Golden Circle",{"depth":31,"slug":38,"text":39},"interview-question-3-the-opening-pain-point","Interview Question 3: The Opening Pain Point",{"depth":31,"slug":41,"text":42},"interview-question-4-article-structure-breadth-vs-depth","Interview Question 4: Article Structure (Breadth vs. Depth)",{"depth":31,"slug":44,"text":45},"interview-question-5--rank-choice-vote-hero-pairings","Interview Question 5 & Rank-Choice Vote: Hero Pairings",[],[],{"title":14,"draft":18,"description":15,"publishDate":16,"author":17},[],"article-2-source-dialogue.md","article-1",{"id":51,"data":53,"body":57,"filePath":58,"digest":59,"rendered":60,"legacyId":77},{"title":54,"description":55,"publishDate":56,"author":17},"dotagents: How to Expand Your Team with AI Agents using Subagents and Git","A guide to managing and versioning your AI subagents using a dotfiles-based approach.","2025-07-20","# `dotagents`: How to Expand Your Team with AI Agents using Subagents and Git\n\nLast week's release of subagents by Anthropic was a significant moment for AI-assisted development. Like many developers, I was immediately excited by the potential to create specialized AI collaborators, moving beyond generic prompts to build a truly bespoke development team.\n\nThis initial excitement, however, quickly led to a practical question: **How do we manage these agents effectively?**\n\nAs the community rushed to create and share new subagents on GitHub, it became clear that we were on the verge of a new configuration management challenge. How do we version these agents? How do we share them across a team or even across our own development environments to ensure consistency?\n\nThe answer lies in a pattern developers have trusted for years: `dotfiles`. By treating our subagents not as disposable prompts but as critical pieces of our development environment, we can use a simple, bare git repository to manage, version, and share them.\n\nThis approach looks beyond the initial hype to solve the next-order problem that enables real-world, scalable adoption. It's how we move from experimenting with subagents to operationalizing them.\n\n### The `dotagents` Solution: A Practical Guide\n\nThe beauty of the `dotfiles` pattern is its simplicity and the fact that it uses a tool developers already know and trust: `git`. Here’s how to apply this pattern to create a shared, version-controlled repository for your AI subagents.\n\n**A Note on Safety and Trust**\n\nBefore we dive in, it's important to highlight a key design principle of this approach. The following commands use `git sparse-checkout`. This is a deliberate choice to ensure that our agent management system *only* ever interacts with the `~/.claude` directory. It will never conflict with your existing dotfiles or other files in your home directory. This isn't just a clever hack; it's a professional, safely-designed system that respects your development environment.\n\n**Step 1: Initialize the Bare Repository**\n\nFirst, we create a \"bare\" git repository in our home directory. A bare repository has no working directory, which means it keeps the git history neatly tucked away and never interferes with your home folder's files.\n\n`git clone --bare https://github.com/iamrichardd/dotagents.git $HOME/.dotagents.git`\n\n**Step 2: Create a Convenient Alias**\n\nNext, we set up a simple alias in our shell's configuration file (`.zshrc`, `.bashrc`, etc.) to make managing our agents easy.\n\n`alias dotagents=\"git --git-dir=$HOME/.dotagents.git/ --work-tree=$HOME\"`\n\n*(Pro-Tip: After adding this alias, you'll need to restart your shell or source your configuration file (e.g., `source ~/.zshrc`) for the new `dotagents` command to become available in your terminal. However, the good news is that once you've checked out your agents, you don't need to restart Claude Code. It will automatically detect any new subagents in the `~/.claude/agents` directory.)*\n\n**Step 3: Check Out Your Agents**\n\nFinally, we use our new `dotagents` command to pull down the agents into the correct directory.\n\n`dotagents sparse-checkout set .claude`\n`dotagents checkout`\n\nAnd that's it. Your subagents are now installed and ready to use.\n\n**A Note on Team Adoption**\n\nWhile the technical steps are simple, the most important part of this process is the human one. Before implementing this system, have a conversation with your team. Discuss which agents you want to standardize and why. By agreeing on a shared set of tools, you're not just managing files; you're building a shared culture of quality and consistency.\n\n### Conclusion: Dev Parity for Your AI Teammates\n\nThink about the last time a new developer joined your team. Did you set them up with the standard edition of your code editor when the rest of the team was using the pro version with a specific set of shared extensions? Of course not. As leaders and team members, we know that a consistent development environment is crucial for collaboration, efficiency, and quality.\n\nWhy should our AI agents be any different?\n\nThe `dotagents` pattern isn't just a clever way to manage files; it's a way to ensure that every developer on your team has the same set of AI collaborators. It's how we achieve \"dev parity\" for our AI teammates.\n\nWhen you and your teammates all use the same `project-manager` subagent, you're not just sharing a prompt; you're sharing a process. You're building a shared culture of quality and consistency, where the AI-assisted code generated on one machine is the same as the code generated on another.\n\nThis is the future of AI-assisted development: not just a collection of individual tools, but a shared, version-controlled, and consistent team of AI collaborators, working alongside us to build better software, faster.","src/content/articles/article-1.md","4d098605bec93cb3",{"html":61,"metadata":62},"\u003Ch1 id=\"dotagents-how-to-expand-your-team-with-ai-agents-using-subagents-and-git\">\u003Ccode>dotagents\u003C/code>: How to Expand Your Team with AI Agents using Subagents and Git\u003C/h1>\n\u003Cp>Last week’s release of subagents by Anthropic was a significant moment for AI-assisted development. Like many developers, I was immediately excited by the potential to create specialized AI collaborators, moving beyond generic prompts to build a truly bespoke development team.\u003C/p>\n\u003Cp>This initial excitement, however, quickly led to a practical question: \u003Cstrong>How do we manage these agents effectively?\u003C/strong>\u003C/p>\n\u003Cp>As the community rushed to create and share new subagents on GitHub, it became clear that we were on the verge of a new configuration management challenge. How do we version these agents? How do we share them across a team or even across our own development environments to ensure consistency?\u003C/p>\n\u003Cp>The answer lies in a pattern developers have trusted for years: \u003Ccode>dotfiles\u003C/code>. By treating our subagents not as disposable prompts but as critical pieces of our development environment, we can use a simple, bare git repository to manage, version, and share them.\u003C/p>\n\u003Cp>This approach looks beyond the initial hype to solve the next-order problem that enables real-world, scalable adoption. It’s how we move from experimenting with subagents to operationalizing them.\u003C/p>\n\u003Ch3 id=\"the-dotagents-solution-a-practical-guide\">The \u003Ccode>dotagents\u003C/code> Solution: A Practical Guide\u003C/h3>\n\u003Cp>The beauty of the \u003Ccode>dotfiles\u003C/code> pattern is its simplicity and the fact that it uses a tool developers already know and trust: \u003Ccode>git\u003C/code>. Here’s how to apply this pattern to create a shared, version-controlled repository for your AI subagents.\u003C/p>\n\u003Cp>\u003Cstrong>A Note on Safety and Trust\u003C/strong>\u003C/p>\n\u003Cp>Before we dive in, it’s important to highlight a key design principle of this approach. The following commands use \u003Ccode>git sparse-checkout\u003C/code>. This is a deliberate choice to ensure that our agent management system \u003Cem>only\u003C/em> ever interacts with the \u003Ccode>~/.claude\u003C/code> directory. It will never conflict with your existing dotfiles or other files in your home directory. This isn’t just a clever hack; it’s a professional, safely-designed system that respects your development environment.\u003C/p>\n\u003Cp>\u003Cstrong>Step 1: Initialize the Bare Repository\u003C/strong>\u003C/p>\n\u003Cp>First, we create a “bare” git repository in our home directory. A bare repository has no working directory, which means it keeps the git history neatly tucked away and never interferes with your home folder’s files.\u003C/p>\n\u003Cp>\u003Ccode>git clone --bare https://github.com/iamrichardd/dotagents.git $HOME/.dotagents.git\u003C/code>\u003C/p>\n\u003Cp>\u003Cstrong>Step 2: Create a Convenient Alias\u003C/strong>\u003C/p>\n\u003Cp>Next, we set up a simple alias in our shell’s configuration file (\u003Ccode>.zshrc\u003C/code>, \u003Ccode>.bashrc\u003C/code>, etc.) to make managing our agents easy.\u003C/p>\n\u003Cp>\u003Ccode>alias dotagents=\"git --git-dir=$HOME/.dotagents.git/ --work-tree=$HOME\"\u003C/code>\u003C/p>\n\u003Cp>\u003Cem>(Pro-Tip: After adding this alias, you’ll need to restart your shell or source your configuration file (e.g., \u003Ccode>source ~/.zshrc\u003C/code>) for the new \u003Ccode>dotagents\u003C/code> command to become available in your terminal. However, the good news is that once you’ve checked out your agents, you don’t need to restart Claude Code. It will automatically detect any new subagents in the \u003Ccode>~/.claude/agents\u003C/code> directory.)\u003C/em>\u003C/p>\n\u003Cp>\u003Cstrong>Step 3: Check Out Your Agents\u003C/strong>\u003C/p>\n\u003Cp>Finally, we use our new \u003Ccode>dotagents\u003C/code> command to pull down the agents into the correct directory.\u003C/p>\n\u003Cp>\u003Ccode>dotagents sparse-checkout set .claude\u003C/code>\n\u003Ccode>dotagents checkout\u003C/code>\u003C/p>\n\u003Cp>And that’s it. Your subagents are now installed and ready to use.\u003C/p>\n\u003Cp>\u003Cstrong>A Note on Team Adoption\u003C/strong>\u003C/p>\n\u003Cp>While the technical steps are simple, the most important part of this process is the human one. Before implementing this system, have a conversation with your team. Discuss which agents you want to standardize and why. By agreeing on a shared set of tools, you’re not just managing files; you’re building a shared culture of quality and consistency.\u003C/p>\n\u003Ch3 id=\"conclusion-dev-parity-for-your-ai-teammates\">Conclusion: Dev Parity for Your AI Teammates\u003C/h3>\n\u003Cp>Think about the last time a new developer joined your team. Did you set them up with the standard edition of your code editor when the rest of the team was using the pro version with a specific set of shared extensions? Of course not. As leaders and team members, we know that a consistent development environment is crucial for collaboration, efficiency, and quality.\u003C/p>\n\u003Cp>Why should our AI agents be any different?\u003C/p>\n\u003Cp>The \u003Ccode>dotagents\u003C/code> pattern isn’t just a clever way to manage files; it’s a way to ensure that every developer on your team has the same set of AI collaborators. It’s how we achieve “dev parity” for our AI teammates.\u003C/p>\n\u003Cp>When you and your teammates all use the same \u003Ccode>project-manager\u003C/code> subagent, you’re not just sharing a prompt; you’re sharing a process. You’re building a shared culture of quality and consistency, where the AI-assisted code generated on one machine is the same as the code generated on another.\u003C/p>\n\u003Cp>This is the future of AI-assisted development: not just a collection of individual tools, but a shared, version-controlled, and consistent team of AI collaborators, working alongside us to build better software, faster.\u003C/p>",{"headings":63,"localImagePaths":73,"remoteImagePaths":74,"frontmatter":75,"imagePaths":76},[64,66,70],{"depth":27,"slug":65,"text":54},"dotagents-how-to-expand-your-team-with-ai-agents-using-subagents-and-git",{"depth":67,"slug":68,"text":69},3,"the-dotagents-solution-a-practical-guide","The dotagents Solution: A Practical Guide",{"depth":67,"slug":71,"text":72},"conclusion-dev-parity-for-your-ai-teammates","Conclusion: Dev Parity for Your AI Teammates",[],[],{"title":54,"description":55,"publishDate":56,"author":17},[],"article-1.md","faster-than-failure",{"id":78,"data":80,"body":83,"filePath":84,"digest":85,"rendered":86,"legacyId":106},{"title":81,"description":82,"publishDate":16,"author":17},"Faster Than Failure: Accelerating a Team with AI Simulation","How a quick, collaborative simulation helped us escape a technical dead end and build a better, more human-centric testing strategy.","Every software team is on a quest for quality. For us, that quest is rooted in a deep belief in human-centric design. This means building products that are intuitive, supported by code that is a pleasure to work with, and developed through a process that is both efficient and collaborative.\n\nBut as any developer knows, that process can get stuck. A technical problem can lead to endless debate, and the path forward becomes foggy. We’ve found that the best way to clear that fog is through a unique form of collaboration: a simulated workshop with a team of specialized AI agents.\n\nTo show you what we mean, we want to share the story of our \"Testing Saga.\"\n\n## The Argument That Wasn’t an Argument\n\nThe title of this article is a bit of a misnomer. When we say we let our AI team \"argue,\" we don’t mean the digital equivalent of Godzilla vs. King Kong. Our argument was a high-speed, collaborative workshop where different expert perspectives pressure-tested an idea until its core weakness was revealed.\n\nOur problem was simple: our end-to-end tests were failing. They were fragile, unreliable, and creating friction for the whole team.\n\n## The Turning Point: A Human-Centric Question\n\nOur initial attempts to fix the problem were purely technical. We tried complex workarounds and debated the merits of different URL structures. We were getting nowhere. The breakthrough came when our **Designer** agent, inspired by Don Norman, asked a simple, human-centric question:\n\n> \"What does the user see to feel confident they're in the right place?\"\n\nThis question changed everything. It lifted us out of the technical weeds and reframed the problem around the user’s experience. The answer was obvious: a user doesn't care about the URL; they care about the giant `\u003Ch1>` heading that says \"Installation.\" The most reliable test wasn't to check the machine's address bar, but to check for the human's confirmation.\n\n## The Virtuous Cycle, Accelerated by AI\n\nThat single question kicked off a virtuous cycle of collaboration, with the AI agents acting as a powerful engine for exploration.\n\nThis new, human-centric approach inspired our **e2e-tester** to abandon the flawed strategy and rapidly experiment with new ones. This is where the unique benefit of AI collaboration became clear. An AI agent can run these experiments—re-configuring the test suite, rebuilding the project, and re-running the tests—at a speed that gives a human developer superpowers. It dramatically lowers the \"cost of curiosity\" and makes true, iterative learning possible.\n\nThis rapid experimentation, driven by our **Frontend Developer** agent, quickly cleared the fog. It didn't magically produce the final answer, but it did something more important: it perfectly illuminated the *nature* of the problem. It revealed that the issue was a fundamental mismatch between our test environment and our production build.\n\nBy having the AI team work through the issue, the human developer was able to \"see\" the rub and step in with the crucial insight. They provided the idiomatic Astro solution—using `import.meta.env.MODE` to handle the configuration—that the AI, in its focused experimentation, had not yet reached. It was the perfect partnership: the AI’s rapid iteration exposed the problem, and the human’s experience provided the elegant solution.\n\n## What We Learned\n\nLetting our AI team \"argue\" was the best thing we could have done. It illustrates a powerful new way to work by reinforcing our core beliefs.\n\nWe saw firsthand that a simulation is a tangible process for bringing a team together. It enables a unique form of human-AI collaboration where the AI's rapid exploration clears the path for a focused, human insight. This partnership allowed us to achieve our ultimate goal: a higher-quality, more robust, and truly human-centric testing strategy.\n\nThe simulation didn’t replace the human developer; it empowered them. It cleared away the friction and noise, allowing them to apply their expertise to the real, underlying problem. It’s a process that doesn’t just build better code; it builds better, more insightful developers.","src/content/articles/faster-than-failure.md","52846fd97091226e",{"html":87,"metadata":88},"\u003Cp>Every software team is on a quest for quality. For us, that quest is rooted in a deep belief in human-centric design. This means building products that are intuitive, supported by code that is a pleasure to work with, and developed through a process that is both efficient and collaborative.\u003C/p>\n\u003Cp>But as any developer knows, that process can get stuck. A technical problem can lead to endless debate, and the path forward becomes foggy. We’ve found that the best way to clear that fog is through a unique form of collaboration: a simulated workshop with a team of specialized AI agents.\u003C/p>\n\u003Cp>To show you what we mean, we want to share the story of our “Testing Saga.”\u003C/p>\n\u003Ch2 id=\"the-argument-that-wasnt-an-argument\">The Argument That Wasn’t an Argument\u003C/h2>\n\u003Cp>The title of this article is a bit of a misnomer. When we say we let our AI team “argue,” we don’t mean the digital equivalent of Godzilla vs. King Kong. Our argument was a high-speed, collaborative workshop where different expert perspectives pressure-tested an idea until its core weakness was revealed.\u003C/p>\n\u003Cp>Our problem was simple: our end-to-end tests were failing. They were fragile, unreliable, and creating friction for the whole team.\u003C/p>\n\u003Ch2 id=\"the-turning-point-a-human-centric-question\">The Turning Point: A Human-Centric Question\u003C/h2>\n\u003Cp>Our initial attempts to fix the problem were purely technical. We tried complex workarounds and debated the merits of different URL structures. We were getting nowhere. The breakthrough came when our \u003Cstrong>Designer\u003C/strong> agent, inspired by Don Norman, asked a simple, human-centric question:\u003C/p>\n\u003Cblockquote>\n\u003Cp>“What does the user see to feel confident they’re in the right place?”\u003C/p>\n\u003C/blockquote>\n\u003Cp>This question changed everything. It lifted us out of the technical weeds and reframed the problem around the user’s experience. The answer was obvious: a user doesn’t care about the URL; they care about the giant \u003Ccode>&#x3C;h1>\u003C/code> heading that says “Installation.” The most reliable test wasn’t to check the machine’s address bar, but to check for the human’s confirmation.\u003C/p>\n\u003Ch2 id=\"the-virtuous-cycle-accelerated-by-ai\">The Virtuous Cycle, Accelerated by AI\u003C/h2>\n\u003Cp>That single question kicked off a virtuous cycle of collaboration, with the AI agents acting as a powerful engine for exploration.\u003C/p>\n\u003Cp>This new, human-centric approach inspired our \u003Cstrong>e2e-tester\u003C/strong> to abandon the flawed strategy and rapidly experiment with new ones. This is where the unique benefit of AI collaboration became clear. An AI agent can run these experiments—re-configuring the test suite, rebuilding the project, and re-running the tests—at a speed that gives a human developer superpowers. It dramatically lowers the “cost of curiosity” and makes true, iterative learning possible.\u003C/p>\n\u003Cp>This rapid experimentation, driven by our \u003Cstrong>Frontend Developer\u003C/strong> agent, quickly cleared the fog. It didn’t magically produce the final answer, but it did something more important: it perfectly illuminated the \u003Cem>nature\u003C/em> of the problem. It revealed that the issue was a fundamental mismatch between our test environment and our production build.\u003C/p>\n\u003Cp>By having the AI team work through the issue, the human developer was able to “see” the rub and step in with the crucial insight. They provided the idiomatic Astro solution—using \u003Ccode>import.meta.env.MODE\u003C/code> to handle the configuration—that the AI, in its focused experimentation, had not yet reached. It was the perfect partnership: the AI’s rapid iteration exposed the problem, and the human’s experience provided the elegant solution.\u003C/p>\n\u003Ch2 id=\"what-we-learned\">What We Learned\u003C/h2>\n\u003Cp>Letting our AI team “argue” was the best thing we could have done. It illustrates a powerful new way to work by reinforcing our core beliefs.\u003C/p>\n\u003Cp>We saw firsthand that a simulation is a tangible process for bringing a team together. It enables a unique form of human-AI collaboration where the AI’s rapid exploration clears the path for a focused, human insight. This partnership allowed us to achieve our ultimate goal: a higher-quality, more robust, and truly human-centric testing strategy.\u003C/p>\n\u003Cp>The simulation didn’t replace the human developer; it empowered them. It cleared away the friction and noise, allowing them to apply their expertise to the real, underlying problem. It’s a process that doesn’t just build better code; it builds better, more insightful developers.\u003C/p>",{"headings":89,"localImagePaths":102,"remoteImagePaths":103,"frontmatter":104,"imagePaths":105},[90,93,96,99],{"depth":31,"slug":91,"text":92},"the-argument-that-wasnt-an-argument","The Argument That Wasn’t an Argument",{"depth":31,"slug":94,"text":95},"the-turning-point-a-human-centric-question","The Turning Point: A Human-Centric Question",{"depth":31,"slug":97,"text":98},"the-virtuous-cycle-accelerated-by-ai","The Virtuous Cycle, Accelerated by AI",{"depth":31,"slug":100,"text":101},"what-we-learned","What We Learned",[],[],{"title":81,"description":82,"publishDate":16,"author":17},[],"faster-than-failure.md","the-golden-circle-of-ai",{"id":107,"data":109,"body":112,"filePath":113,"digest":114,"rendered":115,"legacyId":138},{"title":110,"description":111,"publishDate":16,"author":17},"The Golden Circle of AI: Why, How, and What of Hero-Based Agents","How to fight AI Slop and build better software by giving your AI agents a soul.","## Why Your AI Needs a Hero\n\nWe’ve all seen it. You ask an AI to write a function, and it spits back something that is technically correct but utterly soulless. It works, but it’s hard to read, impossible to test, and doesn’t fit the project's architecture. It’s the digital equivalent of stereo instructions—functional, but devoid of any craft or empathy.\n\nThis is **AI Slop**: mass-produced, low-quality output that prioritizes speed over substance. It’s the inevitable result of a context-free command. It’s the reason you spend more time rewriting AI-generated code than it would have taken to write it yourself.\n\nWe believe there’s a better way. The problem isn’t the AI; it’s the blank slate. To get better code, you need a better collaborator. And the best collaborators have a point of view. They have heroes.\n\n## How We Fight AI Slop: The Power of Influence\n\nWe fight AI Slop by giving our agents a soul. We imbue them with the philosophies of the masters—the heroes whose principles have stood the test of time. This transforms them from simple tools into thoughtful teammates.\n\nHere’s what that looks like in practice.\n\n### The Technical and The Humanist: Martin Fowler & Paul Ford\n\nImagine an agent tasked with creating a new, complex API endpoint. A generic agent might produce a working but dense block of code. But an agent inspired by **Martin Fowler** thinks differently. It understands the principles of clean architecture and refactoring. It produces code that is not only functional but also maintainable, well-structured, and has a low cognitive load.\n\nNow, imagine that same agent needs to document this new endpoint. If it’s also influenced by **Paul Ford**, it won’t just list the parameters. It will write with empathy for the developer who has to use it. It will explain the *why* behind the design choices, provide clear examples, and anticipate the reader's questions. It writes documentation that feels less like a manual and more like a conversation with a helpful colleague.\n\nThis pairing is the ultimate antidote to AI Slop. It combines technical excellence with human-centric communication, ensuring the product is both powerful and usable.\n\n### The Craftsman and The Artist: Kent Beck & Frida Kahlo\n\nBut what about the process of innovation itself? An agent inspired by **Kent Beck** approaches software development with a craftsman’s discipline. It believes in tidy code, iterative development, and the safety net of a robust test suite. It provides the structure and stability needed to build reliable software.\n\nBut if that same agent is also influenced by **Frida Kahlo**, it’s imbued with a spirit that challenges the status quo. It isn't about aesthetics in the visual sense, but about challenging the *aesthetics of representation in code*. It asks: \"Why is this pattern always used? Is there a better, more expressive way?\" It might be inspired to try a new, just-released language feature or a novel architectural approach, not for novelty’s sake, but in a genuine search for a better solution.\n\nThis pairing creates a powerful synergy. Beck’s disciplined, test-driven framework creates the psychological safety required to embrace Kahlo’s fearless, experimental spirit. The speed of AI makes this practical, allowing for rapid, low-cost experiments that would be prohibitive for a human developer. You can dare to try something new because you have a safety net to catch you and an engine to execute the experiment instantly. The result is a process that is not only stable and reliable but also innovative, self-questioning, and unafraid to push boundaries.\n\n## What This Means for You\n\nThis isn’t just a theoretical exercise. This is how **dotagents** works. Our agents are more than just tools; they are collaborators with a point of view, shaped by the heroes we admire.\n\nBy giving your AI agents heroes, you can:\n\n- **Reduce Iterations:** Get closer to the code you want on the first try.\n- **Improve Quality:** Build software that is more maintainable, testable, and thoughtful.\n- **Increase Trust:** Collaborate with an AI that thinks like the best in the field.\n\nStop settling for AI Slop. It’s time to demand more from your AI. It’s time to give your agents heroes.","src/content/articles/the-golden-circle-of-ai.md","464f9db2045e74c4",{"html":116,"metadata":117},"\u003Ch2 id=\"why-your-ai-needs-a-hero\">Why Your AI Needs a Hero\u003C/h2>\n\u003Cp>We’ve all seen it. You ask an AI to write a function, and it spits back something that is technically correct but utterly soulless. It works, but it’s hard to read, impossible to test, and doesn’t fit the project’s architecture. It’s the digital equivalent of stereo instructions—functional, but devoid of any craft or empathy.\u003C/p>\n\u003Cp>This is \u003Cstrong>AI Slop\u003C/strong>: mass-produced, low-quality output that prioritizes speed over substance. It’s the inevitable result of a context-free command. It’s the reason you spend more time rewriting AI-generated code than it would have taken to write it yourself.\u003C/p>\n\u003Cp>We believe there’s a better way. The problem isn’t the AI; it’s the blank slate. To get better code, you need a better collaborator. And the best collaborators have a point of view. They have heroes.\u003C/p>\n\u003Ch2 id=\"how-we-fight-ai-slop-the-power-of-influence\">How We Fight AI Slop: The Power of Influence\u003C/h2>\n\u003Cp>We fight AI Slop by giving our agents a soul. We imbue them with the philosophies of the masters—the heroes whose principles have stood the test of time. This transforms them from simple tools into thoughtful teammates.\u003C/p>\n\u003Cp>Here’s what that looks like in practice.\u003C/p>\n\u003Ch3 id=\"the-technical-and-the-humanist-martin-fowler--paul-ford\">The Technical and The Humanist: Martin Fowler &#x26; Paul Ford\u003C/h3>\n\u003Cp>Imagine an agent tasked with creating a new, complex API endpoint. A generic agent might produce a working but dense block of code. But an agent inspired by \u003Cstrong>Martin Fowler\u003C/strong> thinks differently. It understands the principles of clean architecture and refactoring. It produces code that is not only functional but also maintainable, well-structured, and has a low cognitive load.\u003C/p>\n\u003Cp>Now, imagine that same agent needs to document this new endpoint. If it’s also influenced by \u003Cstrong>Paul Ford\u003C/strong>, it won’t just list the parameters. It will write with empathy for the developer who has to use it. It will explain the \u003Cem>why\u003C/em> behind the design choices, provide clear examples, and anticipate the reader’s questions. It writes documentation that feels less like a manual and more like a conversation with a helpful colleague.\u003C/p>\n\u003Cp>This pairing is the ultimate antidote to AI Slop. It combines technical excellence with human-centric communication, ensuring the product is both powerful and usable.\u003C/p>\n\u003Ch3 id=\"the-craftsman-and-the-artist-kent-beck--frida-kahlo\">The Craftsman and The Artist: Kent Beck &#x26; Frida Kahlo\u003C/h3>\n\u003Cp>But what about the process of innovation itself? An agent inspired by \u003Cstrong>Kent Beck\u003C/strong> approaches software development with a craftsman’s discipline. It believes in tidy code, iterative development, and the safety net of a robust test suite. It provides the structure and stability needed to build reliable software.\u003C/p>\n\u003Cp>But if that same agent is also influenced by \u003Cstrong>Frida Kahlo\u003C/strong>, it’s imbued with a spirit that challenges the status quo. It isn’t about aesthetics in the visual sense, but about challenging the \u003Cem>aesthetics of representation in code\u003C/em>. It asks: “Why is this pattern always used? Is there a better, more expressive way?” It might be inspired to try a new, just-released language feature or a novel architectural approach, not for novelty’s sake, but in a genuine search for a better solution.\u003C/p>\n\u003Cp>This pairing creates a powerful synergy. Beck’s disciplined, test-driven framework creates the psychological safety required to embrace Kahlo’s fearless, experimental spirit. The speed of AI makes this practical, allowing for rapid, low-cost experiments that would be prohibitive for a human developer. You can dare to try something new because you have a safety net to catch you and an engine to execute the experiment instantly. The result is a process that is not only stable and reliable but also innovative, self-questioning, and unafraid to push boundaries.\u003C/p>\n\u003Ch2 id=\"what-this-means-for-you\">What This Means for You\u003C/h2>\n\u003Cp>This isn’t just a theoretical exercise. This is how \u003Cstrong>dotagents\u003C/strong> works. Our agents are more than just tools; they are collaborators with a point of view, shaped by the heroes we admire.\u003C/p>\n\u003Cp>By giving your AI agents heroes, you can:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Reduce Iterations:\u003C/strong> Get closer to the code you want on the first try.\u003C/li>\n\u003Cli>\u003Cstrong>Improve Quality:\u003C/strong> Build software that is more maintainable, testable, and thoughtful.\u003C/li>\n\u003Cli>\u003Cstrong>Increase Trust:\u003C/strong> Collaborate with an AI that thinks like the best in the field.\u003C/li>\n\u003C/ul>\n\u003Cp>Stop settling for AI Slop. It’s time to demand more from your AI. It’s time to give your agents heroes.\u003C/p>",{"headings":118,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":137},[119,122,125,128,131],{"depth":31,"slug":120,"text":121},"why-your-ai-needs-a-hero","Why Your AI Needs a Hero",{"depth":31,"slug":123,"text":124},"how-we-fight-ai-slop-the-power-of-influence","How We Fight AI Slop: The Power of Influence",{"depth":67,"slug":126,"text":127},"the-technical-and-the-humanist-martin-fowler--paul-ford","The Technical and The Humanist: Martin Fowler & Paul Ford",{"depth":67,"slug":129,"text":130},"the-craftsman-and-the-artist-kent-beck--frida-kahlo","The Craftsman and The Artist: Kent Beck & Frida Kahlo",{"depth":31,"slug":132,"text":133},"what-this-means-for-you","What This Means for You",[],[],{"title":110,"description":111,"publishDate":16,"author":17},[],"the-golden-circle-of-ai.md"]